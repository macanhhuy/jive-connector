/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.jive;

import org.mule.modules.jive.JiveFacade.ServiceType;

import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

/**JiveConnector Test.
 * @author Pablo Diez
 * @since Jul 20, 2011
 */
public class JiveModuleFooTest {
    /**The gateway uri.*/
    private final String gatewayUri =
        "https://app-sandbox.jivesoftware.com/rpc/rest";
    /**Facade instance.*/
    private static JiveFacade facade;

    /**Instantiates the JiveModule with the test properties.*/
    @Before
    public final void init() {
        facade = new JiveModule(gatewayUri, System.getenv("SandboxUser"),
            System.getenv("SandboxPass"));
    }

    /**Register a new user sending only the username, password and email.
     * */
    @Ignore
    @Test
    public final void newUserWithMinimalData() {
        Map<String, Object> user = new HashMap<String, Object>();
        user.put("username", "userTestZauberMule");
        user.put("password", "pass4e511Mule");
        user.put("email", "pablomatiasdiez@gmail.com");
        facade.create(ServiceType.USER_CREATE, user);
    }

    /**Register a new user with all the user data.
     * */
    @Ignore
    @Test
    public final void newUserWithUserData() {
        final Long magicNumber = 23L;
        Map<String, Object> user = new HashMap<String, Object>();
        user.put("creationDate", Calendar.getInstance());
        user.put("email", System.getenv("SandboxEmail"));
        user.put("emailVisible", true);
        user.put("enabled", true);
        user.put("firstName", "Paul");
        user.put("ID", magicNumber);
        user.put("lastName", "Federer");
        user.put("modificationDate", Calendar.getInstance());
        user.put("name", "name");
        user.put("nameVisible", true);
        user.put("password", System.getenv("SandboxPass"));
        user.put("username", System.getenv("SandboxUser"));
        facade.create(ServiceType.USER_CREATE_USER_WITH_USER, user);
    }

    /**Test the creation of entities.
     * Creates an user in the address book
     * */
    @Test
    public final void createEntities() {
        final Map<String, Object> addressBookUser =
            new HashMap<String, Object>();
        addressBookUser.put("userID", facade.getUserID());
        addressBookUser.put("usernameToAdd", "someUsername");
        testCreate(ServiceType.ADDRESSBOOK_ADD_USER, addressBookUser);
    }

    /**Test the get count.*/
    @Test
    public final void getCount() {
        facade.count(ServiceType.BLOG_COUNT);
    }

    /**Test the delete service.
     * */
    @Test
    public final void testDeleteSingular() {
        facade.delete(ServiceType.AVATAR_DELETE, "123");
    }

    /**Test the delete service.
     * */
    @Test
    public final void testDeletePlural() {
        facade.delete(ServiceType.COMMUNITY_DELETE, "123");
    }

    /**Test the Avatar create service.
     * @param map The mapping of the Avatar entity
     * @param type The service to call
     * */
    private void testCreate(final ServiceType type,
                            final Map<String, Object> map) {
        facade.create(type, map);
        //get
        //verificar que la entidad obtenida en el get es igual a la creada
        //delete
    }

}