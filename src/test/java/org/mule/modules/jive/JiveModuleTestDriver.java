/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */

package org.mule.modules.jive;

import static org.junit.Assert.*;
import static org.mule.modules.jive.api.EntityTypeName.*;

import com.sun.jersey.api.client.UniformInterfaceException;

import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;

/**
 * JiveConnector Test.
 * 
 * @author Pablo Diez
 * @since Jul 20, 2011
 */
public class JiveModuleTestDriver
{
    /** The gateway uri. */
    private final String gatewayUri = "https://app-sandbox.jivesoftware.com/rpc/rest";
    /** Facade instance. */
    private JiveModule facade;

    /** Instantiates the JiveModule with the test properties. */
    @Before
    public final void init()
    {
        facade = new JiveModule();
        facade.setGatewayUri(gatewayUri);
        facade.setUsername(System.getenv("SandboxUser"));
        facade.setPassword(System.getenv("SandboxPass"));
        facade.init();
    }
    
    @Test
    public void testGetUserIdIsNotNull() throws Exception
    {
        assertNotNull(facade.getUserID());
    }
    
    @Test
    /**Testing create method.
     * Creates an Avatar*/
    public void getExistingBlogIsNotNull()
    {
        String id = (String) facade.create(BLOG, newBlog()).get("ID");
        try
        {
            Map<String, Object> blog = facade.get(BLOG, id);
            assertNotNull(blog);
        }
        finally
        {
            facade.delete(BLOG, id);
        }
    }

    @SuppressWarnings("serial")
    private HashMap<String, Object> newAvatar()
    {
        return new HashMap<String, Object>()
        {
            {
                put("ownerID", facade.getUserID());
                put("name", "avatarTest10");
                put("contentType", "image/jpg");
                put("data", Arrays.asList("qwertyui", "12345678"));
            }
        };
    }

    @Test(expected = UniformInterfaceException.class)
    // TODO check
    public void getInexistentBlogFails() throws Exception
    {
        facade.get(BLOG, "foobar1234");
    }

    /**
     * Test the delete method. Deletes an Avatar
     */
    @Test(expected = UniformInterfaceException.class)
    public void deleteInexistentBlogFails()
    {
        facade.delete(BLOG, "foobar1234");
    }

    /**
     * Test the delete method. Deletes an Avatar
     */
    @Test
    public void deleteExistentSucceeds()
    {
        String id = (String) facade.create(BLOG, newBlog()).get("ID");
        facade.delete(BLOG, id);
    }
    
    @Test
    public void createBlogReturnsNonNullObjectWithNonNullId() throws Exception
    {
        Map<String, Object> blog = facade.create(BLOG, newBlog());
        
        assertNotNull(blog);
        assertNotNull(blog.get("ID"));
        facade.delete(BLOG, (String) blog.get("ID"));
    }
    
    
    @Test
    public void createAvatarReturnsNonNullObjectWithNonNullId() throws Exception
    {
        Map<String, Object> blog = facade.create(AVATAR, newAvatar());
        
        assertNotNull(blog);
        assertNotNull(blog.get("ID"));
        facade.delete(AVATAR, (String) blog.get("ID"));
    }
    

    @SuppressWarnings("serial")
    private LinkedHashMap<String, Object> newBlog()
    {
        return new LinkedHashMap<String, Object>()
        {
            {
                put("userID", facade.getUserID());
                put("blogName", "foob0az07");
                put("displayName", "foobazb0ar1");
            }
        };
    }
    
    
    /**Test the execution of a {@link CustomOp} with the wrong quantity of arguments.*/
    @Test(expected = UniformInterfaceException.class)
    public void executeOperationWithBadArgumentsCountThrowsIllegalArgumentException()
    {
        facade.execute(CustomOp.COMMENT_GET_ALL, null, "434");
    }

    @Test
    /**Test the execution of an {@link Operation} with a {@link CustomOp}.*/
    public void executeOperationWithCustomOpAndIdSucceeds()
    {
        Map<String, Object> blog = facade.create(BLOG, newBlog());
        Map<String, Object> result = facade.execute(CustomOp.BLOG_DELETE, null, (String) blog.get("ID"));
        System.out.println(result);
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }
    
    @Test
    /**Test the execution of a {@link CustomOp}.*/
    public void executeCustomOpSucceeds()
    {
        Map<String, Object> users = facade.execute(CustomOp.USER_GET_USERS, null, null);
        assertNotNull(users);
        assertFalse(users.isEmpty());
    }

    @Test
    public final void getCountAnswersANonNullPostiveLong()
    {
        assertTrue(facade.count(BLOG) >= 0);
    }

}
