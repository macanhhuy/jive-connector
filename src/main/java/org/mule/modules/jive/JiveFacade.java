/**
 * Mule Development Kit Copyright 2010-2011 (c) MuleSoft, Inc. All rights
 * reserved. http://www.mulesoft.com
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.jive;

import java.io.Reader;
import java.io.Writer;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;

/**
 * Facade for the Jive connector
 * 
 * 
 * @author Pablo Diez
 * @since Jul 20, 2011
 */
public interface JiveFacade
{

    Map<String, Object> create(
        final ServiceType type, Map<String, Object> entity);
    Map<String, Object> delete(final ServiceType type, String id);
    Map<String, Object> xml2map(final Reader reader);
    void map2xml(final ServiceType type,
        final Map<String, Object> entity, final Writer writer);
    Long count(final ServiceType type);
    public void setUser(String user);
    public void setPass(String pass);
    public String getUser();
    public String getPass();
    public Long getUserID();

    /**Services enum.
     * */
    enum ServiceType {
        /**Avatar create reference.*/
        AVATAR_CREATE,
        /**Avatar delete reference.*/
        AVATAR_DELETE,
        /**Adress Book create user reference.*/
        ADDRESSBOOK_CREATE_USER("addUser"),
        /**Community delete reference.*/
        COMMUNITY_DELETE,
        /**Get blog count reference.*/
        BLOG_COUNT,
        /**Blog create reference.*/
        BLOG_CREATE,
        /**User create with the minimal data.*/
        USER_CREATE,
        /**User create sending the entire user data.*/
        USER_CREATE_WITH_USER(true);

        /**In almost all cases the uri of a delete request has the
         * entity name in plural, this are the exceptions.*/
        private static Set<String> deleteSingularExceptions =
            new HashSet<String>();
        static {
            deleteSingularExceptions.add("AVATAR");
        }

        /**This are the cases in which the service name in the uri is different
         * than the entitity name in lower case + Service.*/
        private static Map<String, String> serviceNameExceptions =
            new HashMap<String, String>();
        static {
            serviceNameExceptions.put("ADDRESSBOOK_CREATE_USER",
                "addressBookService");
        }

        /**Constructor.*/
        private ServiceType() {
            this.setRootTagName(getXmlRootElementName());
        }

        /**Constructor for special start tags.
         * @param rootTag The root tag name*/
        private ServiceType(final String rootTag) {
            this.setRootTagName(rootTag);
        }

        /**Constructor.
         * @param usesExtraTag If true uses an extra tag with the entity name*/
        private ServiceType(final boolean usesExtraTag) {
            this();
            this.setExtraTag(usesExtraTag);
        }

        /**@return The entity name in lowercase.*/
        public final String getEntityName() {
            return splitName[0].toLowerCase();
        }

        /**This variable holds the initial tag name of the request.*/
        private String rootTagName;

        /**Split of the service name.*/
        private final String[] splitName =
            StringUtils.split(this.toString(), '_');

        /**If true, the request of this service has an extra tag with the entity
         * name.*/
        private boolean extraTag = false;

        /**@return the rootElement of the xml request
         * */
        private String getXmlRootElementName() {
            final StringBuffer rootElementName = new StringBuffer();
            rootElementName.append(StringUtils.lowerCase(splitName[1]));
            rootElementName.append(StringUtils.capitalize(
                StringUtils.lowerCase(splitName[0])));
            if (splitName.length > 2) {
                for (int i = 2; i < splitName.length; i++) {
                    rootElementName.append(
                        StringUtils.capitalize(splitName[i].toLowerCase()));
                }
            }
            return rootElementName.toString();
        }

        /**@return The path of the specified service
         * */
        private String getServiceName() {
            if (serviceNameExceptions.containsKey(this.toString())) {
                return serviceNameExceptions.get(this.toString());
            }
            return splitName[0].toLowerCase() + "Service";
        }

        /**@return The path of the specified create service
         * The services listed in the api referenced as 'Create' are in plural
         * */
        public final String getCreateServiceName() {
            return getServiceName() + "/" + pluralizeService();
        }

        /**@return The path of the specified delete service
         * The services listed in the api reference as 'Create' are in plural
         * */
        public final String getDeleteServiceName() {
            final StringBuffer res = new StringBuffer(getServiceName() + "/");
            if (deleteSingularExceptions.contains(splitName[0])) {
                res.append(splitName[0].toLowerCase());
            } else {
                res.append(pluralizeService());
            }
            return res.toString();
        }

        /**@return Uri for the count service.*/
        public final String getCountServiceName() {
            final String[] split = StringUtils.split(this.toString(), '_');
            return getServiceName() + "/" + split[0].toLowerCase()
                    + StringUtils.capitalize(split[1].toLowerCase());
        }

        /**Pluralize the service name.
         * @return {@link String} with the name of the service in plural
         */
        private String pluralizeService() {
            if (StringUtils.endsWith(splitName[0], "Y")) {
                return (splitName[0].substring(0, splitName[0].length() - 1)
                + "ies").toLowerCase();
            }
            return (splitName[0] + "s").toLowerCase();
        }

        /**
         * @param usesExtraTag the extraTag to set
         */
        public final void setExtraTag(final boolean usesExtraTag) {
            this.extraTag = usesExtraTag;
        }

        /**
         * @return the extraTag
         */
        public final boolean hasExtraTag() {
            return extraTag;
        }

        /**
         * @param rootTag the rootTagName to set
         */
        public void setRootTagName(final String rootTag) {
            this.rootTagName = rootTag;
        }

        /**
         * @return the rootTagName
         */
        public String getRootTagName()
        {
            return rootTagName;
        }

    }
}
