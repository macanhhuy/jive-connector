/**
 * Mule Development Kit Copyright 2010-2011 (c) MuleSoft, Inc. All rights
 * reserved. http://www.mulesoft.com
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.jive;

import java.io.Reader;
import java.io.Writer;
import java.util.Map;

import org.mule.modules.jive.utils.ServiceUriFactory;

/**Facade for the Jive connector.
 * @author Pablo Diez
 * @since Jul 20, 2011
 */
public interface JiveFacade {

    /**Creates an entity.
     * Sends a POST request for the given {@link Service} generating the xml
     * payload corresponding with the <code>entity</code> map.
     * @return The xml response parse in a {@link Map}.
     * @param type The service type used to determine the url for this resource.
     * @param entity The {@link Map} with the entity data to parse to an xml and send
     * in the request.
     * */
    Map<String, Object> create(
        final Service type, Map<String, Object> entity);

    /**Executes a POST {@link CustomOp}.
     * @return The xml response parse in a {@link Map}.
     * @param customType The service to execute, used to determine the resource url, 
     * the http protocol to use and, if needed, the root tag for the xml to be
     * send in the request.
     * @param entity The {@link Map} with the entity data to parse to an xml and send
     * in the request.
     * */
    Map<String, Object> execute(final CustomOp customType,
        Map<String, Object> entity);

    /**Executes GET or DELETE {@link CustomOp}.
     * @return The xml response parse in a {@link Map}.
     * @param customType The service to execute, used to determine the resource url, 
     * the http protocol to use and, if needed, the root tag for the xml to be
     * send in the request.
     * @param id {@link String} containing the path parameters separated with ':'. 
     * */
    Map<String, Object> execute(final CustomOp customType,
        final String id);

    /**TODO - Should create a new enum with the protocol to use
     * and the name of the operation, the uri will be determined
     * by the name of the operation using
     * {@link ServiceUriFactory#generateCustomUri(Service, String)}.
     * This new enum will exist mainly to give the user a proper
     * operations list.*/
    Map<String, Object> execute(final String uri,
            final String id);

    /**Deletes an entity.
     * @return The xml response parse in a {@link Map}.
     * @param type The service type used to determine the url for this resource.
     * @param id The id to be added in the url as path parameter.
     * */
    Map<String, Object> delete(final Service type, String id);

    /**Parse an xml into a {@link Map}.
     * @return The map corresponding to the given xml.
     * @param reader {@link Reader} with the xml.
     * */
    Map<String, Object> xml2map(final Reader reader);

    /**Parse an entity into an xml and writes it in the given {@link Writer}.
     * @param xmlRootTag The xml root element to use in the xml formation.
     * @param entity The {@link Map} with the entity data to be parsed.
     * @param writer The {@link Writer} in witch the xml will be written.
     * */
    void map2xml(final String xmlRootTag,
                 final Map<String, Object> entity, final Writer writer);

    /***/
    Long count(final Service type);
    /***/
    void setUser(String user);
    /***/
    void setPass(String pass);
    /***/
    String getUser();
    /***/
    String getPass();
    /***/
    Long getUserID();
    
}
