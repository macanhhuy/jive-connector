/**
 * Mule Development Kit Copyright 2010-2011 (c) MuleSoft, Inc. All rights
 * reserved. http://www.mulesoft.com
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.jive;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;

/**
 * Facade for the Jive connector
 * 
 * 
 * @author Pablo Diez
 * @since Jul 20, 2011
 */
public interface JiveFacade
{

    Map<String, Object> create(ServiceType type, Map<String, Object> entity);
    Map<String, Object> delete(ServiceType type, String id);

    /**Services enum.
     * */
    enum ServiceType {
        /**Avatar create reference.*/
        AVATAR_CREATE,
        /**Avatar delete reference.*/
        AVATAR_DELETE;

        /**Split of the service name.*/
        private final String[] splitName =
            StringUtils.split(this.toString(), '_');

        /**In almost all cases the uri of a delete request has the
         * entity name in plural, this are the exceptions.*/
        private static Set<String> deleteSingularExceptions = new HashSet<String>(10);
        static {
            deleteSingularExceptions.add("avatar");
        }

        /**@return the rootElement of the xml request
         * */
        public final String getXmlRootElementName() {
            final StringBuffer rootElementName = new StringBuffer();
            rootElementName.append(StringUtils.lowerCase(splitName[1]));
            rootElementName.append(StringUtils.capitalize(
                StringUtils.lowerCase(splitName[0])));
            return rootElementName.toString();
        }

        /**@return The path of the specified service
         * */
        private String getServiceName() {
            return splitName[0].toLowerCase() + "Service";
        }

        /**@return The path of the specified create service
         * The services listed in the api reference as 'Create' end with 's'
         * */
        public final String getCreateServiceName() {
            return this.getServiceName() + "/" + pluralizeService();
        }

        /**@return The path of the specified delete service
         * The services listed in the api reference as 'Create' end with 's'
         * */
        public final String getDeleteServiceName() {
            final StringBuffer res = new StringBuffer(getServiceName() + "/");
            if (deleteSingularExceptions.contains(splitName[0])) {
                res.append(splitName[0]);
            } else {
                res.append(pluralizeService());
            }
            return res.toString();
        }

        /**Pluralize the service name.
         * @return {@link String} with the name of the service in plural
         */
        private String pluralizeService() {
            if (StringUtils.endsWith(splitName[0], "Y")) {
                return (splitName[0].substring(0, splitName[0].length() - 1)
                + "ies").toLowerCase();
            }
            return (splitName[0] + "s").toLowerCase();
        }

    }
}
