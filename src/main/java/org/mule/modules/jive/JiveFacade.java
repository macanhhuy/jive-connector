/**
 * Mule Jive Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.jive;

import org.mule.modules.jive.api.EntityType;

import java.util.Map;

/**Facade for the Jive connector.
 * @author Pablo Diez
 * @since Jul 20, 2011
 */
public interface JiveFacade 
{

    /**Creates an entity.
     * Sends a POST request for the given {@link EntityType} generating the xml
     * payload corresponding with the <code>entity</code> map.
     * @return The xml response parse in a {@link Map}.
     * @param type The service type used to determine the url for this resource.
     * @param entity The {@link Map} with the entity data to parse to an xml and send
     * in the request.
     * */
    Map<String, Object> create(
        final EntityType type, Map<String, Object> entity);

    /**Deletes an entity.
     * @return The xml response parse in a {@link Map}.
     * @param type The service type used to determine the url for this resource.
     * @param id The id to be added in the url as path parameter.
     * */
    Map<String, Object> delete(final EntityType type, String id);
    
    /**Get count method.
     * @return The count of the {@link EntityType} returned by the server as {@link Long}
     * @param type The entity type to count
     * */
    Long count(final EntityType type);
    
    /**Executes a get request with the given id as path params for the given {@link EntityType}
     * @param entityType The entity type
     * @param id The path params to add to the resource uri
     * @return The server response as a {@link Map}
     */
    Map<String, Object> get(EntityType entityType, String id);
    
    
    /**Executes a put method for the given {@link EntityType} sending as payload the given entity.
     * @param entityType The entity type
     * @param entity The data to be send as payload in the request
     * @return The server response as a {@link Map}
     */
    Map<String, Object> update(EntityType entityType, Map<String, Object> entity);
    
    /**Executes a POST {@link CustomOp}.
     * @return The xml response parse in a {@link Map}.
     * @param customType The service to execute, used to determine the resource url, 
     * the http protocol to use and, if needed, the root tag for the xml to be
     * send in the request.
     * @param entity The {@link Map} with the entity data to parse to an xml and send
     * in the request.
     * */
    Map<String, Object> execute(final CustomOp customType, Map<String, Object> entity, String id);

    /**Sets the jive username*/
    void setUsername(String user);
    /**Sets the jive password*/
    void setPassword(String pass);
    /**Make a request for the userID to the jive server for the given username and password.
     * @return The jive userID*/
    Long getUserID();
    /**Sets the gatewayUri to be used as base url for the rest server*/
    void setGatewayUri(String gatewayUri);
    
}
